{"ast":null,"code":"var _jsxFileName = \"/home/dd/Desktop/shopping/frontend/src/content/container/user/signup.js\";\nimport React from 'react';\nimport { Form, Icon, Input, Button } from 'antd';\nimport { theUrl } from 'selfConfig';\n\nvar Signup = function Signup(props) {\n  var comfirmDirty = false;\n  var getFieldDecorator = props.form.getFieldDecorator;\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    props.form.validateFields(function (err, values) {\n      if (!err) {\n        console.log(\"data valid, signing up now\");\n      }\n    });\n  };\n\n  var checkemail = function checkemail(rule, value, callback) {\n    if (value) {\n      // callback(\"This email existed\")\n      var url = theUrl + '/duplicationCheck';\n      fetch(url, {\n        headers: {\n          'Accept': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          username: value\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        console.log(res);\n      });\n    } else {\n      callback();\n    }\n  };\n\n  var validateToNextPassword = function validateToNextPassword(rule, value, callback) {\n    var form = props.form;\n\n    if (value && comfirmDirty) {\n      form.validataFields(['confirm'], {\n        force: true\n      });\n    }\n\n    callback();\n  };\n\n  var compareToFirstPassword = function compareToFirstPassword(rules, value, callback) {\n    var form = props.form;\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two password that you entry are inconsistent');\n    } else {\n      callback();\n    }\n  };\n\n  return React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, getFieldDecorator('email', {\n    rules: [{\n      required: true,\n      message: 'Please input your username'\n    }, {\n      validator: checkemail\n    }],\n    validateTrigger: 'onBlur'\n  })(React.createElement(Input, {\n    placeholder: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: 'Please input your message'\n    }, {\n      validator: validateToNextPassword\n    }]\n  })(React.createElement(Input, {\n    type: \"password\",\n    placeholder: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, getFieldDecorator('confirm', {\n    rules: [{\n      required: true,\n      message: 'Please input your password again'\n    }, {\n      validator: compareToFirstPassword\n    }]\n  })(React.createElement(Input, {\n    type: \"password\",\n    placeholder: \"input password again\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Button, {\n    tpye: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"sign up\")));\n};\n\nexport default Form.create({\n  name: 'normal_login'\n})(Signup);","map":{"version":3,"sources":["/home/dd/Desktop/shopping/frontend/src/content/container/user/signup.js"],"names":["React","Form","Icon","Input","Button","theUrl","Signup","props","comfirmDirty","getFieldDecorator","form","handleSubmit","e","preventDefault","validateFields","err","values","console","log","checkemail","rule","value","callback","url","fetch","headers","method","body","JSON","stringify","username","then","res","json","validateToNextPassword","validataFields","force","compareToFirstPassword","rules","getFieldValue","required","message","validator","validateTrigger","create","name"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    Form, Icon, Input, Button\n} from 'antd';\nimport { theUrl } from 'selfConfig'\n\n\nconst Signup = (props) => {\n    let comfirmDirty = false\n\n    const { getFieldDecorator } = props.form\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        props.form.validateFields((err, values)=>{\n            if( !err ) {\n                console.log(\"data valid, signing up now\")\n            }\n        })\n    }\n\n    const checkemail = (rule, value, callback) => {\n        if (value) {\n            // callback(\"This email existed\")\n            const url= theUrl+'/duplicationCheck'\n            fetch(url, {\n                headers: {\n                    'Accept':'application/json'\n                },\n                method: 'POST',\n                body: JSON.stringify({\n                    username: value\n                })\n            })\n            .then(res => { return res.json() })\n            .then(res => {\n                console.log(res)\n            })\n        }\n        else {\n            callback()\n        }\n    }\n\n    const validateToNextPassword = (rule, value, callback) => {\n        const form = props.form\n        if ( value && comfirmDirty) {\n            form.validataFields(['confirm'], { force: true })\n        }\n        callback()\n    }\n\n    const compareToFirstPassword = (rules, value, callback) => {\n        const form = props.form\n        if( value && value !== form.getFieldValue('password')) {\n            callback('Two password that you entry are inconsistent')\n        } else {\n            callback()\n        }\n    }\n    return(\n        <Form onSubmit={handleSubmit}>\n            <Form.Item>\n            {getFieldDecorator('email', {\n                rules: [{\n                    required: true, message: 'Please input your username'\n                }, {\n                    validator: checkemail\n                }],\n                validateTrigger: 'onBlur'\n            })\n            (<Input placeholder=\"email\"/>)}\n            </Form.Item>\n\n            <Form.Item>\n            {getFieldDecorator('password', {\n                rules: [{\n                    required : true, message: 'Please input your message'\n                }, {\n                    validator: validateToNextPassword\n                }]\n            })(<Input type=\"password\" placeholder=\"password\"/>)}\n            </Form.Item>\n\n            <Form.Item>\n            {getFieldDecorator('confirm',{\n                rules: [{\n                    required: true, message: 'Please input your password again'\n                }, {\n                    validator: compareToFirstPassword\n                }]\n            })(<Input type=\"password\" placeholder=\"input password again\"/>)}\n            </Form.Item>\n\n            <Form.Item>\n            <Button tpye=\"primary\" htmlType=\"submit\">sign up</Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\n\nexport default Form.create({name: 'normal_login'})(Signup)"]},"metadata":{},"sourceType":"module"}