{"ast":null,"code":"import _regeneratorRuntime from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/dd/Desktop/sell/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/dd/Desktop/sell/frontend/src/content/container/public_component/components/postCommodity.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button, Upload, Icon, Select, Modal, message } from 'antd';\nimport { Link, Route } from 'react-router-dom';\nimport { theUrl, tokenHeaders, dateToDateTime } from 'selfConfig';\nimport UserPostList from './userPostList'; // page structor\n\nvar postCommodity = function postCommodity(_ref) {\n  var match = _ref.match,\n      auth = _ref.auth;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: {\n      pathname: \"/root_dashboard/admin/newPost\",\n      state: {\n        username: auth.username\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Create New Post\")), React.createElement(Route, {\n    path: \"/root_dashboard/admin/newPost\",\n    component: NewPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(UserPostList, {\n    username: auth.username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), \"}}/>\");\n}; // An form that can post commodity card\n\n\nvar newPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(newPost, _Component);\n\n  function newPost(props) {\n    var _this;\n\n    _classCallCheck(this, newPost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(newPost).call(this, props));\n    _this.state = {\n      loading: true,\n      // location.state is passed by <Link>\n      username: _this.props.location.state.username,\n      payload: []\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleEvent = _this.handleEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(newPost, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, payload;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = theUrl + '/userProfile';\n                _context.next = 3;\n                return fetch(url, {\n                  headers: tokenHeaders(localStorage.getItem(\"token\")),\n                  method: 'POST',\n                  body: JSON.stringify({\n                    username: this.state.username\n                  })\n                }).then(function (res) {\n                  return res.json();\n                });\n\n              case 3:\n                payload = _context.sent;\n                this.setState({\n                  loading: false,\n                  payload: payload[0]\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // get fileList in upload component\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      // this.props.form.setFieldsValue({uploadComTest: fileList}); ???\n      if (!e || !e.fileList) {\n        return e;\n      }\n\n      var fileList = e.fileList; // console.log(\"handleEvent: \", fileList);\n\n      return fileList;\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log(_this2.state.payload);\n          console.log(values);\n          var payload = _this2.state.payload;\n          var url = theUrl + '/uploadPic';\n          var date = dateToDateTime();\n          fetch(url, {\n            headers: tokenHeaders(localStorage.getItem(\"token\")),\n            method: 'POST',\n            body: JSON.stringify({\n              uid: payload.uid,\n              commodity: values.commodity,\n              price: values.price,\n              des: values.des,\n              post_time: date,\n              category: values.category,\n              cardPic: values.uploadPics,\n              phone: values.phone\n            })\n          }).then(function (res) {\n            return res.json();\n          }).then(function (res) {\n            if (res.post) {\n              _this2.props.history.replace(\"/user_profile/postCommodity\");\n\n              window.location.reload();\n            } else {\n              message.error(\"create commodity card failed\");\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var payload = this.state.payload;\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var TextArea = Input.TextArea;\n      var Option = Select.Option; // upload configs\n\n      var props = {\n        action: theUrl + \"/createCard\",\n        listType: \"picture\",\n        // onChange: this.handleUpload,\n        beforeUpload: function beforeUpload(file) {\n          var isJPG = file.type === 'image/jpeg';\n\n          if (!isJPG) {\n            message.error('You can only upload JPG file!');\n          }\n\n          var isLt2M = file.size / 1024 / 1024 < 5;\n\n          if (!isLt2M) {\n            message.error('Image must smaller than 5MB!');\n          }\n\n          return isJPG && isLt2M;\n        }\n      };\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, getFieldDecorator('uploadPics', {\n        valuePropName: 'fileList',\n        getValueFromEvent: this.handleEvent,\n        rules: [{\n          required: true,\n          message: 'add picture'\n        }]\n      })(React.createElement(Upload, Object.assign({\n        name: \"logo\"\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"ghost\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), \" Click to upload\")))), React.createElement(Form.Item, {\n        label: \"Commodity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, getFieldDecorator('commodity', {\n        rules: [{\n          required: true,\n          message: '商品名不能为空'\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Price \\uFFE5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, getFieldDecorator('price', {\n        rules: [{\n          required: true,\n          pattern: new RegExp(/^[1-9]\\d*$/, \"g\"),\n          message: '商品价格的格式错误'\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, getFieldDecorator('des', {\n        rules: [{\n          required: true,\n          message: '商品描述不能为空'\n        }]\n      })(React.createElement(TextArea, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"\\u5206\\u7C7B\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, getFieldDecorator('category', {\n        initialValue: \"1\",\n        rules: [{\n          required: true,\n          message: '商品描述不能为空'\n        }]\n      })(React.createElement(Select, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"\\u4E66\\u7C4D\"), React.createElement(Option, {\n        value: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"\\u7535\\u5B50\\u4EA7\\u54C1\"), React.createElement(Option, {\n        value: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"\\u5916\\u5FEB\"), React.createElement(Option, {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"others\")))), React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Create Now!\")));\n    }\n  }]);\n\n  return newPost;\n}(Component); // it should be read as an component\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nvar PostCommodity = connect(mapStateToProps)(postCommodity);\nvar NewPost = Form.create({\n  name: 'create_new_post'\n})(newPost);\nexport default PostCommodity;","map":{"version":3,"sources":["/home/dd/Desktop/sell/frontend/src/content/container/public_component/components/postCommodity.js"],"names":["React","Component","connect","Form","Input","Button","Upload","Icon","Select","Modal","message","Link","Route","theUrl","tokenHeaders","dateToDateTime","UserPostList","postCommodity","match","auth","pathname","state","username","NewPost","newPost","props","loading","location","payload","handleSubmit","bind","handleEvent","url","fetch","headers","localStorage","getItem","method","body","JSON","stringify","then","res","json","setState","e","fileList","preventDefault","form","validateFields","err","values","console","log","date","uid","commodity","price","des","post_time","category","cardPic","uploadPics","phone","post","history","replace","window","reload","error","getFieldDecorator","TextArea","Option","action","listType","beforeUpload","file","isJPG","type","isLt2M","size","valuePropName","getValueFromEvent","rules","required","pattern","RegExp","initialValue","mapStateToProps","PostCommodity","create","name"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4CC,MAA5C,EAAoDC,KAApD,EAA2DC,OAA3D,QAA2E,MAA3E;AACA,SAASC,IAAT,EAAcC,KAAd,QAA2B,kBAA3B;AAEA,SAASC,MAAT,EAAkBC,YAAlB,EAAgCC,cAAhC,QAAuD,YAAvD;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAIA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAmB;AAAA,MAAjBC,KAAiB,QAAjBA,KAAiB;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACrC,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AACI,IAAA,EAAE,EAAE;AACAC,MAAAA,QAAQ,EAAE,+BADV;AAEAC,MAAAA,KAAK,EAAE;AACHC,QAAAA,QAAQ,EAAEH,IAAI,CAACG;AADZ;AAFP,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CAFJ,EAYI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAE,+BADV;AAEI,IAAA,SAAS,EAAEC,OAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,EAkBI,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEJ,IAAI,CAACG,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,SADJ;AAuBH,CAxBD,C,CA2BA;;;IACOE,O;;;;;AACH,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,iFAAMA,KAAN;AACA,UAAKJ,KAAL,GAAa;AACTK,MAAAA,OAAO,EAAE,IADA;AAET;AACAJ,MAAAA,QAAQ,EAAE,MAAKG,KAAL,CAAWE,QAAX,CAAoBN,KAApB,CAA0BC,QAH3B;AAITM,MAAAA,OAAO,EAAE;AAJA,KAAb;AAOA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,uDAAnB;AAVe;AAWlB;;;;;;;;;;;;;AAGSE,gBAAAA,G,GAAMnB,MAAM,GAAG,c;;uBAECoB,KAAK,CAACD,GAAD,EAAM;AAC7BE,kBAAAA,OAAO,EAAEpB,YAAY,CAACqB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CADQ;AAE7BC,kBAAAA,MAAM,EAAE,MAFqB;AAG7BC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACrBlB,oBAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC;AADA,mBAAf;AAHuB,iBAAN,CAAL,CAMnBmB,IANmB,CAMb,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,iBANU,C;;;AAAhBf,gBAAAA,O;AAQN,qBAAKgB,QAAL,CAAc;AACVlB,kBAAAA,OAAO,EAAE,KADC;AAEVE,kBAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AAFN,iBAAd;;;;;;;;;;;;;;;QAOJ;;;;gCACYiB,C,EAAI;AACZ;AAEA,UAAI,CAACA,CAAD,IAAM,CAACA,CAAC,CAACC,QAAb,EAAuB;AACrB,eAAOD,CAAP;AACD;;AALW,UAOJC,QAPI,GAOSD,CAPT,CAOJC,QAPI,EAQZ;;AACA,aAAOA,QAAP;AACH;;;iCAEYD,C,EAAG;AAAA;;AACZA,MAAAA,CAAC,CAACE,cAAF;AACA,WAAKtB,KAAL,CAAWuB,IAAX,CAAgBC,cAAhB,CAA+B,UAACC,GAAD,EAAMC,MAAN,EAAgB;AAC3C,YAAG,CAACD,GAAJ,EAAS;AAEPE,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAI,CAAChC,KAAL,CAAWO,OAAvB;AACAwB,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHO,cAKAvB,OALA,GAKW,MAAI,CAACP,KALhB,CAKAO,OALA;AAMP,cAAMI,GAAG,GAAGnB,MAAM,GAAG,YAArB;AACA,cAAMyC,IAAI,GAAGvC,cAAc,EAA3B;AAEAkB,UAAAA,KAAK,CAACD,GAAD,EAAM;AACTE,YAAAA,OAAO,EAAEpB,YAAY,CAACqB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CADZ;AAETC,YAAAA,MAAM,EAAE,MAFC;AAGTC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBe,cAAAA,GAAG,EAAE3B,OAAO,CAAC2B,GADM;AAEnBC,cAAAA,SAAS,EAAEL,MAAM,CAACK,SAFC;AAGnBC,cAAAA,KAAK,EAAEN,MAAM,CAACM,KAHK;AAInBC,cAAAA,GAAG,EAAEP,MAAM,CAACO,GAJO;AAKnBC,cAAAA,SAAS,EAAEL,IALQ;AAMnBM,cAAAA,QAAQ,EAAET,MAAM,CAACS,QANE;AAOnBC,cAAAA,OAAO,EAAEV,MAAM,CAACW,UAPG;AAQnBC,cAAAA,KAAK,EAAEZ,MAAM,CAACY;AARK,aAAf;AAHG,WAAN,CAAL,CAcCtB,IAdD,CAcM,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,WAdT,EAeCF,IAfD,CAeM,UAAAC,GAAG,EAAI;AACT,gBAAGA,GAAG,CAACsB,IAAP,EAAa;AACX,cAAA,MAAI,CAACvC,KAAL,CAAWwC,OAAX,CAAmBC,OAAnB,CAA2B,6BAA3B;;AACAC,cAAAA,MAAM,CAACxC,QAAP,CAAgByC,MAAhB;AACD,aAHD,MAGO;AACH1D,cAAAA,OAAO,CAAC2D,KAAR,CAAc,8BAAd;AACH;AACJ,WAtBD;AAuBD;AACJ,OAlCD;AAmCH;;;6BAGQ;AAAA,UACEzC,OADF,GACa,KAAKP,KADlB,CACEO,OADF;AAAA,UAEG0C,iBAFH,GAEyB,KAAK7C,KAAL,CAAWuB,IAFpC,CAEGsB,iBAFH;AAAA,UAGGC,QAHH,GAGgBnE,KAHhB,CAGGmE,QAHH;AAAA,UAIGC,MAJH,GAIchE,MAJd,CAIGgE,MAJH,EAML;;AACA,UAAM/C,KAAK,GAAG;AACVgD,QAAAA,MAAM,EAAE5D,MAAM,GAAC,aADL;AAEV6D,QAAAA,QAAQ,EAAE,SAFA;AAGV;AACAC,QAAAA,YAAY,EAAE,sBAACC,IAAD,EAAU;AACpB,cAAMC,KAAK,GAAGD,IAAI,CAACE,IAAL,KAAc,YAA5B;;AACA,cAAI,CAACD,KAAL,EAAY;AACVnE,YAAAA,OAAO,CAAC2D,KAAR,CAAc,+BAAd;AACD;;AACD,cAAMU,MAAM,GAAGH,IAAI,CAACI,IAAL,GAAY,IAAZ,GAAmB,IAAnB,GAA0B,CAAzC;;AACA,cAAI,CAACD,MAAL,EAAa;AACXrE,YAAAA,OAAO,CAAC2D,KAAR,CAAc,8BAAd;AACD;;AACD,iBAAOQ,KAAK,IAAIE,MAAhB;AACH;AAdS,OAAd;AAiBA,aACI,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKlD,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCyC,iBAAiB,CAAC,YAAD,EAAe;AAC7BW,QAAAA,aAAa,EAAE,UADc;AAE7BC,QAAAA,iBAAiB,EAAE,KAAKnD,WAFK;AAG7BoD,QAAAA,KAAK,EAAE,CAAC;AACRC,UAAAA,QAAQ,EAAE,IADF;AACS1E,UAAAA,OAAO,EAAC;AADjB,SAAD;AAHsB,OAAf,CAAjB,CAOG,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC;AAAb,SAAwBe,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACA,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,qBADA,CAPH,CADD,CAFJ,EAkBI,oBAAC,IAAD,CAAM,IAAN;AAAW,QAAA,KAAK,EAAC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC6C,iBAAiB,CAAC,WAAD,EAAc;AAC5Ba,QAAAA,KAAK,EAAE,CAAC;AAACC,UAAAA,QAAQ,EAAE,IAAX;AAAiB1E,UAAAA,OAAO,EAAE;AAA1B,SAAD;AADqB,OAAd,CAAjB,CAGG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHH,CADD,CAlBJ,EAyBI,oBAAC,IAAD,CAAM,IAAN;AAAW,QAAA,KAAK,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC4D,iBAAiB,CAAC,OAAD,EAAU;AACxBa,QAAAA,KAAK,EAAC,CAAC;AACHC,UAAAA,QAAQ,EAAC,IADN;AAEHC,UAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,YAAX,EAAyB,GAAzB,CAFN;AAGH5E,UAAAA,OAAO,EAAE;AAHN,SAAD;AADkB,OAAV,CAAjB,CAOG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPH,CADD,CAzBJ,EAqCI,oBAAC,IAAD,CAAM,IAAN;AAAW,QAAA,KAAK,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC4D,iBAAiB,CAAC,KAAD,EAAQ;AACtBa,QAAAA,KAAK,EAAE,CAAC;AAACC,UAAAA,QAAQ,EAAE,IAAX;AAAiB1E,UAAAA,OAAO,EAAE;AAA1B,SAAD;AADe,OAAR,CAAjB,CAGG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHH,CADD,CArCJ,EA6CI,oBAAC,IAAD,CAAM,IAAN;AAAW,QAAA,KAAK,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC4D,iBAAiB,CAAC,UAAD,EAAa;AAC3BiB,QAAAA,YAAY,EAAE,GADa;AAE3BJ,QAAAA,KAAK,EAAE,CAAC;AAACC,UAAAA,QAAQ,EAAE,IAAX;AAAiB1E,UAAAA,OAAO,EAAE;AAA1B,SAAD;AAFoB,OAAb,CAAjB,CAIC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFF,EAGE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CAJD,CADD,CA7CJ,EA2DI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,QAAQ,EAAC,QAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CA3DJ,CADJ;AAoEH;;;;EAjLkBT,S,GAoLvB;;;AAEA,IAAMuF,eAAe,GAAG,SAAlBA,eAAkB,CAAAnE,KAAK;AAAA,SAAK;AAC9BF,IAAAA,IAAI,EAAEE,KAAK,CAACF;AADkB,GAAL;AAAA,CAA7B;;AAGA,IAAMsE,aAAa,GAAIvF,OAAO,CAACsF,eAAD,CAAP,CAAyBvE,aAAzB,CAAvB;AACA,IAAMM,OAAO,GAAGpB,IAAI,CAACuF,MAAL,CAAY;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAZ,EAAyCnE,OAAzC,CAAhB;AAEA,eAAeiE,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Form, Input, Button, Upload, Icon, Select, Modal, message, } from 'antd'\nimport { Link,Route } from 'react-router-dom'\n\nimport { theUrl , tokenHeaders, dateToDateTime  } from 'selfConfig'\nimport UserPostList from './userPostList'\n\n\n \n// page structor\nconst postCommodity = ({match, auth}) => {\n    return(\n        <div>\n            {/* post commodity area */}\n            <Button type=\"primary\">\n                <Link \n                    to={{\n                        pathname: \"/root_dashboard/admin/newPost\",\n                        state: {\n                            username: auth.username\n                        }\n                    }}\n                >Create New Post</Link>\n            </Button>\n            <Route \n                path={\"/root_dashboard/admin/newPost\"}\n                component={NewPost}\n            />\n\n            {/* Show and manage commodity cards area */}\n            <UserPostList username={auth.username} />\n            }}/>\n        </div>\n    )\n}\n\n\n// An form that can post commodity card\nclass  newPost extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            // location.state is passed by <Link>\n            username: this.props.location.state.username,\n            payload: []\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleEvent = this.handleEvent.bind(this)\n    }\n\n    async componentDidMount() {\n        const url = theUrl + '/userProfile'\n\n        const payload = await fetch(url, {\n            headers: tokenHeaders(localStorage.getItem(\"token\")),\n            method: 'POST',\n            body: JSON.stringify({\n            username: this.state.username\n            })\n        }).then( res => res.json() )\n        \n        this.setState({\n            loading: false,\n            payload: payload[0]\n        })\n\n    }\n\n    // get fileList in upload component\n    handleEvent(e)  {\n        // this.props.form.setFieldsValue({uploadComTest: fileList}); ???\n        \n        if (!e || !e.fileList) {\n          return e;\n        }\n        \n        const { fileList } = e;\n        // console.log(\"handleEvent: \", fileList);\n        return fileList;\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.form.validateFields((err, values)=> {\n            if(!err) {\n\n              console.log(this.state.payload)\n              console.log(values)\n\n              const {payload} = this.state\n              const url = theUrl + '/uploadPic'\n              const date = dateToDateTime()\n              \n              fetch(url, {\n                headers: tokenHeaders(localStorage.getItem(\"token\")),\n                method: 'POST',\n                body: JSON.stringify({\n                  uid: payload.uid,\n                  commodity: values.commodity,\n                  price: values.price,\n                  des: values.des,\n                  post_time: date,\n                  category: values.category,\n                  cardPic: values.uploadPics,\n                  phone: values.phone\n                })\n              })\n              .then(res => res.json())\n              .then(res => {\n                  if(res.post) {\n                    this.props.history.replace(\"/user_profile/postCommodity\")\n                    window.location.reload()\n                  } else {\n                      message.error(\"create commodity card failed\")\n                  }\n              })\n            }\n        })\n    }\n\n\n    render() {\n        const {payload} = this.state\n        const { getFieldDecorator } = this.props.form\n        const { TextArea } = Input \n        const { Option } = Select \n\n        // upload configs\n        const props = {\n            action: theUrl+\"/createCard\",\n            listType: \"picture\",\n            // onChange: this.handleUpload,\n            beforeUpload:　(file)　=> {\n                const isJPG = file.type === 'image/jpeg';\n                if (!isJPG) {\n                  message.error('You can only upload JPG file!');\n                }\n                const isLt2M = file.size / 1024 / 1024 < 5;\n                if (!isLt2M) {\n                  message.error('Image must smaller than 5MB!');\n                }\n                return isJPG && isLt2M;\n            }\n        };\n\n        return(\n            <Form onSubmit={this.handleSubmit}>\n                {/* personal information */}\n                <Form.Item>\n                {getFieldDecorator('uploadPics', {\n                    valuePropName: 'fileList',\n                    getValueFromEvent: this.handleEvent,\n                    rules: [{\n                    required: true , message:'add picture'\n                    }]\n                })(\n                    <Upload name=\"logo\" {...props}>\n                    <Button type=\"ghost\">\n                        <Icon type=\"upload\" /> Click to upload\n                    </Button>\n                    </Upload>\n                )}\n                </Form.Item>\n                \n                <Form.Item label=\"Commodity\">\n                {getFieldDecorator('commodity', {\n                    rules: [{required: true, message: '商品名不能为空'}]\n                })(\n                    <Input />\n                )}\n                </Form.Item>\n                <Form.Item label=\"Price ￥\">\n                {getFieldDecorator('price', {\n                    rules:[{\n                        required:true,\n                        pattern: new RegExp(/^[1-9]\\d*$/, \"g\"),\n                        message: '商品价格的格式错误'\n                    }]\n                })(\n                    <Input />\n                )}\n                </Form.Item>\n\n                <Form.Item label=\"Description\">\n                {getFieldDecorator('des', {\n                    rules: [{required: true, message: '商品描述不能为空'}]\n                })(\n                    <TextArea />\n                )}\n                </Form.Item>\n\n                <Form.Item label=\"分类\">\n                {getFieldDecorator('category', {\n                    initialValue: \"1\",\n                    rules: [{required: true, message: '商品描述不能为空'}]\n                })(\n                  <Select>\n                    <Option value=\"1\">书籍</Option>\n                    <Option value=\"2\">电子产品</Option>\n                    <Option value=\"3\">外快</Option>\n                    <Option value=\"0\">others</Option>\n                  </Select>\n                )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button \n                        type=\"primary\"\n                        htmlType=\"submit\"\n                    >Create Now!</Button>\n                </Form.Item>\n            </Form>\n        )\n    }\n}\n\n// it should be read as an component\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n})\nconst PostCommodity =  connect(mapStateToProps)(postCommodity)\nconst NewPost = Form.create({ name: 'create_new_post' })(newPost)\n\nexport default PostCommodity"]},"metadata":{},"sourceType":"module"}