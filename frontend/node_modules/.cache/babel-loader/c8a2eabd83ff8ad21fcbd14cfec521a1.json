{"ast":null,"code":"import _regeneratorRuntime from \"/home/dd/Desktop/nangua/frontend/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(incrementAsync),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchIncrementAsync),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetechTest),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchFetechTest),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { put, takeEvery, all } from 'redux-saga/effects';\nexport function helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('Hello Sagas!');\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nvar delay = function delay(ms) {\n  return new Promise(function (res) {\n    return setTimeout(res, ms);\n  });\n}; // ...\n// Our worker Saga: will perform the async increment task\n\n\nexport function incrementAsync() {\n  return _regeneratorRuntime.wrap(function incrementAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context2.next = 4;\n          return put({\n            type: 'INCREMENT'\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n} // Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\n\nexport function watchIncrementAsync() {\n  return _regeneratorRuntime.wrap(function watchIncrementAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery('INCREMENT_ASYNC', incrementAsync);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n} // Test redux-saga fetech data\n\nvar url = 'http://localhost:5000/commodityList';\n\nvar fetechData = function fetechData() {\n  fetech(url).then(function (res) {\n    return res.json();\n  });\n};\n\nfunction fetechTest() {\n  var payload;\n  return _regeneratorRuntime.wrap(function fetechTest$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return fetechData();\n\n        case 2:\n          payload = _context4.sent;\n          console.log(payload);\n          console.log('fetechTest executed');\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\n\nfunction watchFetechTest() {\n  return _regeneratorRuntime.wrap(function watchFetechTest$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery('TEST_INIT', fetechTest);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([helloSaga(), watchIncrementAsync(), watchFetechTest()]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this);\n}","map":{"version":3,"sources":["/home/dd/Desktop/nangua/frontend/src/content/sagas.js"],"names":["helloSaga","incrementAsync","watchIncrementAsync","fetechTest","watchFetechTest","rootSaga","put","takeEvery","all","console","log","delay","ms","Promise","res","setTimeout","type","url","fetechData","fetech","then","json","payload"],"mappings":";;;;yBAEiBA,S;;;yBAUAC,c;;;yBAMAC,mB;;;yBAWPC,U;;;yBAMAC,e;;;yBAKeC,Q;;AAxCzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,QAAsC,oBAAtC;AAEA,OAAO,SAAUR,SAAV;AAAA;AAAA;AAAA;AAAA;AACNS,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKP,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,EAAD;AAAA,SAAQ,IAAIC,OAAJ,CAAY,UAAAC,GAAG;AAAA,WAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAAd;AAAA,GAAf,CAAR;AAAA,CAAd,C,CAEA;AAEA;;;AACA,OAAO,SAAUX,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMU,KAAK,CAAC,IAAD,CAAX;;AADK;AAAA;AAEL,iBAAML,GAAG,CAAC;AAAEU,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKP;;AACA,OAAO,SAAUd,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMK,SAAS,CAAC,iBAAD,EAAoBN,cAApB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKP;;AACA,IAAMgB,GAAG,GAAG,qCAAZ;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBC,EAAAA,MAAM,CAACF,GAAD,CAAN,CACCG,IADD,CACO,UAAAN,GAAG,EAAI;AAAE,WAAOA,GAAG,CAACO,IAAJ,EAAP;AAAmB,GADnC;AAEH,CAHD;;AAIA,SAAUlB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACoB,iBAAMe,UAAU,EAAhB;;AADpB;AACUI,UAAAA,OADV;AAEIb,UAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUN,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMG,SAAS,CAAC,WAAD,EAAcJ,UAAd,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CACRR,SAAS,EADD,EAERE,mBAAmB,EAFX,EAGRE,eAAe,EAHP,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, takeEvery, all,  } from 'redux-saga/effects'\n\nexport function* helloSaga() {\n\tconsole.log('Hello Sagas!')\n}\n\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\n// ...\n\n// Our worker Saga: will perform the async increment task\nexport function* incrementAsync() {\n  yield delay(1000)\n  yield put({ type: 'INCREMENT' })\n}\n\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\nexport function* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n\n\n// Test redux-saga fetech data\nconst url = 'http://localhost:5000/commodityList';\nconst fetechData = () => {\n    fetech(url)\n    .then( res => { return res.json() })\n}\nfunction* fetechTest() {\n    const payload = yield fetechData()\n    console.log(payload)\n    console.log('fetechTest executed')\n}\n\nfunction* watchFetechTest() {\n    yield takeEvery('TEST_INIT', fetechTest)\n}\n\n\nexport default function* rootSaga() {\n  yield all([\n    helloSaga(),\n    watchIncrementAsync(),\n    watchFetechTest()\n  ])\n}"]},"metadata":{},"sourceType":"module"}